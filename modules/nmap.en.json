{
    "module": {
        "description": "# Nmap Module\n\nThe `nmap` module provides a powerful interface to the Nmap network scanning tool via the `python-nmap` library. It is designed for users ranging from beginners to expert penetration testers, supporting **all Nmap parameters**—from basic host discovery to advanced service enumeration and OS detection.\n\n## Key Features\n- **Customizable Scans**: Define hosts, ports, scan types, timing, and additional arguments.\n- **Scan Types**: Supports TCP SYN (`-sS`), UDP (`-sU`), service version (`-sV`), ping (`-sn`), and aggressive (`-A`) scans.\n- **Port Retrieval**: Fetch open ports for TCP, UDP, or other protocols.\n- **Privileged Operations**: Execute scans requiring root privileges with `sudo`.\n- **Requirement Checks**: Verify Nmap installation with `check_requirements()`.\n\n## Usage Overview\nImport the `NmapScanner` class to perform scans programmatically or use manual Nmap commands for flexibility.\n\n### Python Example\n```python\nfrom nmapscanner import NmapScanner\nscanner = NmapScanner()\nresult = scanner.scan_network('192.168.1.0/24', ports='22-443', arguments='-sS -sV', timing='T4', sudo=True)\n```\n\n### Manual Nmap Equivalent\nRun the same scan directly in your terminal:\n```bash\nsudo nmap -sS -sV -p 22-443 -T4 192.168.1.0/24\n```\n\n- **sudo**: Necessary for privileged scans (e.g., `-sS`, `-sU`).\n- **-sS**: Stealth TCP SYN scan.\n- **-sV**: Detect service versions.\n- **-p 22-443**: Scan ports 22 to 443.\n- **-T4**: Faster timing template.\n- **192.168.1.0/24**: Target subnet.\n\nFor more options, see the [Nmap Reference Guide](https://nmap.org/book/man.html).",
        "features": [
            "Customizable scans with all Nmap parameters.",
            "Supports all scan types (-sS, -sU, -sV, -sn, -A).",
            "Retrieve open ports for TCP, UDP, etc.",
            "Run privileged scans with sudo.",
            "Verify Nmap installation."
        ],
        "usage": "Import `NmapScanner` and instantiate it for scans or checks.",
        "example": "scanner = NmapScanner(); result = scanner.scan_network('192.168.1.0/24', ports='22-443', arguments='-sS -sV', timing='T4', sudo=True)"
    },
    "scan_network": {
        "description": "## scan_network\n\nExecutes a fully customizable Nmap scan, supporting all parameters and options. Ideal for reconnaissance, enumeration, and advanced penetration testing.\n\n### Parameters\n\n| Parameter      | Type   | Description                                                                 | Default   |\n|----------------|--------|-----------------------------------------------------------------------------|-----------|\n| `hosts`        | str    | Target hosts (e.g., '192.168.1.1', 'example.com', '192.168.1.0/24')         | Required  |\n| `ports`        | str    | Port range (e.g., '22-443', '1-65535', 'U:53,111,T:21-25')                  | None      |\n| `arguments`    | str    | Nmap arguments (e.g., '-sS', '-sU', '-A', '-O', '-sV')                      | ''        |\n| `timing`       | str    | Timing template ('T0' slowest to 'T5' fastest)                              | None      |\n| `sudo`         | bool   | Run with sudo for privileged scans (e.g., SYN, UDP)                         | False     |\n| `**kwargs`     | dict   | Additional Nmap options (e.g., `verbose='-v'`, `os_detection='-O'`)          | {}        |\n\n### Returns\n- **Dict**: Contains:\n  - `'hosts'`: List of scanned hosts.\n  - `'scan_info'`: Metadata about the scan.\n  - `'command_line'`: Exact Nmap command executed.\n\n### Usage Examples\n\n#### Python Usage\n```python\n# Basic TCP SYN scan\nscanner.scan_network('192.168.1.1', ports='22-443', arguments='-sS')\n\n# Network discovery (ping scan)\nscanner.scan_network('192.168.1.0/24', arguments='-sn')\n\n# All ports with service detection\nscanner.scan_network('example.com', arguments='-p- -sV', timing='T4')\n\n# UDP scan with sudo\nscanner.scan_network('192.168.1.1', ports='U:53,111', arguments='-sU', sudo=True)\n\n# Aggressive scan with OS detection\nscanner.scan_network('192.168.1.1', arguments='-A', timing='T5', sudo=True, verbose='-v')\n```\n\n#### Manual Nmap Commands\nFor non-Python users, here are the equivalent terminal commands:\n- **TCP SYN Scan**:\n  ```bash\n  nmap -sS -p 22-443 192.168.1.1\n  ```\n- **Ping Scan**:\n  ```bash\n  nmap -sn 192.168.1.0/24\n  ```\n- **All Ports with Service Detection**:\n  ```bash\n  nmap -p- -sV -T4 example.com\n  ```\n- **UDP Scan**:\n  ```bash\n  sudo nmap -sU -p U:53,111 192.168.1.1\n  ```\n- **Aggressive Scan**:\n  ```bash\n  sudo nmap -A -T5 -v 192.168.1.1\n  ```\n\n### Notes\n- **Beginners**: Start with simple scans like `-sn` or `-sS` with default settings.\n- **Experts**: Combine `-A`, `-O`, and custom scripts (`--script`) for deep analysis.\n- **Timing**: Use `T4` or `T5` for speed, but `T0` for stealth.\n\n### Warnings\n- Privileged scans (`-sS`, `-sU`) require `sudo` on Unix-like systems.\n- Aggressive scans (`-A`, `-T5`) may trigger IDS/IPS—use with caution and permission.",
        "short_description": "Run a customizable Nmap scan.",
        "usage": "scanner.scan_network(hosts='192.168.1.1', ports='22-443', arguments='-sS', timing='T3', sudo=False, verbose='-v')",
        "example_scenarios": [
            "Basic SYN: `scanner.scan_network('example.com', ports='80,443', arguments='-sS')`",
            "Ping Scan: `scanner.scan_network('192.168.1.0/24', arguments='-sn')`",
            "Full Scan: `scanner.scan_network('192.168.1.1', arguments='-p- -sV', timing='T4')`"
        ]
    },
    "get_open_ports": {
        "description": "## get_open_ports\n\nFetches open ports for a specified host and protocol from the last scan. Useful for targeting specific services.\n\n### Parameters\n\n| Parameter  | Type | Description                             | Default |\n|------------|------|-----------------------------------------|---------|\n| `host`     | str  | Target host (e.g., '192.168.1.1')       | Required|\n| `protocol` | str  | Protocol ('tcp', 'udp', 'sctp')         | 'tcp'   |\n\n### Returns\n- **List[int]**: Open port numbers.\n\n### Usage Examples\n\n#### Python Usage\n```python\n# TCP ports\nscanner.get_open_ports('192.168.1.1', 'tcp')\n\n# UDP ports\nscanner.get_open_ports('192.168.1.1', 'udp')\n```\n\n#### Manual Nmap Output\nRun a scan and parse the output:\n```bash\nnmap -sS -p 22-443 192.168.1.1\n```\nOutput:\n```\nPORT   STATE SERVICE\n22/tcp open  ssh\n80/tcp open  http\n```\nFilter manually or use `grep`:\n```bash\nnmap -sS -p 22-443 192.168.1.1 | grep 'open'\n```\n\n### Notes\n- Requires a prior scan with relevant protocol flags (e.g., `-sU` for UDP).\n- Experts can extend with custom parsing for SCTP or rare protocols.",
        "short_description": "Get open ports for a host.",
        "usage": "scanner.get_open_ports('192.168.1.1', protocol='tcp')"
    },
    "check_requirements": {
        "description": "## check_requirements\n\nChecks if Nmap is installed by running `nmap --version`.\n\n### Returns\n- **bool**: `True` if installed, `False` otherwise.\n\n### Usage Examples\n\n#### Python Usage\n```python\nif scanner.check_requirements():\n    print('Nmap ready!')\nelse:\n    print('Install Nmap first.')\n```\n\n#### Manual Check\n```bash\nnmap --version\n```\nIf installed, you’ll see version info; otherwise, an error.\n\n### Notes\n- Essential for ensuring functionality.",
        "short_description": "Verify Nmap installation.",
        "usage": "scanner.check_requirements()"
    },
    "installation_guide": {
        "mac": "### macOS\n```bash\nbrew install nmap\nnmap --version\n```",
        "kali": "### Kali Linux\n```bash\nsudo apt install nmap\nnmap --version\n```",
        "ubuntu": "### Ubuntu\n```bash\nsudo apt install nmap\nnmap --version\n```",
        "windows": "### Windows\nDownload from [Nmap.org](https://nmap.org/download.html), install, and run:\n```cmd\nnmap --version\n```"
    }
}